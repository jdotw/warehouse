openapi: "3.0.2"
info:
  title: Stock API
  version: "1.0"
servers:
  - url: https://api.server.test/v1
paths:
  #
  # Categories
  #
  /categories:
    get:
      tags:
        - Category
      summary: Get all Categories
      description: Get all Categories
      operationId: GetCategories
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Category
      summary: Create Category
      description: Create Category
      operationId: CreateCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCategoryRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /categories/{category_id}:
    get:
      tags:
        - Category
      summary: Get Category
      description: Get Category
      operationId: GetCategory
      parameters:
        - $ref: "#/components/parameters/CategoryID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - Category
      summary: Update Category
      description: Update Category
      operationId: UpdateCategory
      parameters:
        - $ref: "#/components/parameters/CategoryID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - Category
      summary: Delete a Category
      description: Delete a Category
      operationId: DeleteCategory
      parameters:
        - $ref: "#/components/parameters/CategoryID"
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  #
  # Items
  #
  /categories/{category_id}/items:
    get:
      tags:
        - Item
      summary: Get all Items in a Category
      description: Get all Items in a Category
      operationId: GetItemsInCategory
      parameters:
        - $ref: "#/components/parameters/CategoryID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Item
      summary: Create Item in a Category
      description: Create Item in a Category
      operationId: CreateItemInCategory
      parameters:
        - $ref: "#/components/parameters/CategoryID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateItemRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /items/{item_id}:
    get:
      tags:
        - Item
      summary: Get Item
      description: Get Item
      operationId: GetItem
      parameters:
        - $ref: "#/components/parameters/ItemID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - Item
      summary: Update Item
      description: Update Item
      operationId: UpdateItem
      parameters:
        - $ref: "#/components/parameters/ItemID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - Item
      summary: Delete a Item
      description: Delete a Item
      operationId: DeleteItem
      parameters:
        - $ref: "#/components/parameters/ItemID"
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  #
  # Locations
  #
  /locations:
    get:
      tags:
        - Location
      summary: Get all Locations
      description: Get all Locations
      operationId: GetLocations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Location"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Location
      summary: Create Location
      description: Create Location
      operationId: CreateLocation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLocationRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /locations/{location_id}:
    get:
      tags:
        - Location
      summary: Get a specific Location
      description: Get a specific Location
      operationId: GetLocation
      parameters:
        - $ref: "#/components/parameters/LocationID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      tags:
        - Location
      summary: Update Location
      description: Update Location
      operationId: UpdateLocation
      parameters:
        - $ref: "#/components/parameters/LocationID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      tags:
        - Location
      summary: Delete a Location
      description: Delete a Location
      operationId: DeleteLocation
      parameters:
        - $ref: "#/components/parameters/LocationID"
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  #
  # Transactions
  #
  /transactions:
    get:
      tags:
        - Transaction
      summary: Get all Transactions
      description: Get all Transactions
      operationId: GetTransactions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Transaction
      summary: Create Transaction
      description: Create Transaction
      operationId: CreateTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransactionRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /transactions/{transaction_id}:
    get:
      tags:
        - Transaction
      summary: Get a specific Transaction
      description: Get a specific Transaction
      operationId: GetTransaction
      parameters:
        - $ref: "#/components/parameters/TransactionID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    # Objects
    #
    # Category
    #
    Category:
      description: Category
      type: object
      properties:
        id:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey;unique;type:uuid;default:uuid_generate_v4();"
        name:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: "not null"
      required:
        - id
        - name
    CreateCategoryRequest:
      description: "Create Category"
      type: object
      properties:
        name:
          type: string
      required:
        - name
    #
    # Item
    #
    Item:
      description: Item
      type: object
      properties:
        id:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey;unique;type:uuid;default:uuid_generate_v4();"
        category_id:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: "type:uuid;default:uuid_generate_v4();"
        name:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: "not null"
        upc:
          type: integer
          x-oapi-codegen-extra-tags:
            gorm: "not null"
        transaction_line_items:
          type: array
          items:
            $ref: "#/components/schemas/TransactionLineItem"
      required:
        - id
        - category_id
        - name
        - upc
    CreateItemRequest:
      description: "Create Item"
      type: object
      properties:
        name:
          type: string
        upc:
          type: integer
      required:
        - name
        - upc
    #
    # Location
    #
    Location:
      description: Location
      type: object
      properties:
        id:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey;unique;type:uuid;default:uuid_generate_v4();"
        name:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: "not null"
        transactions:
          type: array
          items:
            $ref: "#/components/schemas/Transaction"
      required:
        - id
        - name
    CreateLocationRequest:
      description: Create Location
      type: object
      properties:
        name:
          type: string
      required:
        - name
    #
    # Transaction
    #
    Transaction:
      description: Transaction
      type: object
      properties:
        id:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey;unique;type:uuid;default:uuid_generate_v4();"
        location_id:
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            gorm: "not null"
        timestamp:
          type: string
          format: date-time
          x-oapi-codegen-extra-tags:
            gorm: "not null"
        items:
          type: array
          items:
            $ref: "#/components/schemas/TransactionLineItem"
      required:
        - id
        - location_id
        - timestamp
        - items

    TransactionLineItem:
      description: Item in a Transaction
      type: object
      properties:
        id:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey;unique;type:uuid;default:uuid_generate_v4();"
        item_id:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: "not null"
        transaction_id:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: "not null"
        quantity:
          type: integer
        sequence_number:
          type: integer
          x-oapi-codegen-extra-tags:
            gorm: "unique;type:uint;autoIncrement;"
      required:
        - id
        - item_id
        - transaction_id
        - quantity

    CreateTransactionRequest:
      description: Create Transaction
      type: object
      properties:
        location_id:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: "#/components/schemas/CreateTransactionItem"
        timestamp:
          type: string
          format: date-time
      required:
        - location_id
        - items
    CreateTransactionItem:
      description: Item in a new Transaction
      type: object
      properties:
        item_id:
          type: string
        quantity:
          type: integer
      required:
        - item_id
        - quantity
    # Errors
    HTTPError:
      type: object
      properties:
        message:
          type: string
  parameters:
    CategoryID:
      name: category_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    ItemID:
      name: item_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    LocationID:
      name: location_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    TransactionID:
      name: transaction_id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
  responses:
    HTTPError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPError"
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPError"
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPError"
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPError"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPError"
    TooManyRequestsError:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPError"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/HTTPError"
